(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{403:function(t,e,a){"use strict";a.r(e);var n=a(4),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"version-22-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#version-22-3"}},[t._v("#")]),t._v(" Version 22.3")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#introduction"}},[t._v("Introduction")])]),e("li",[e("a",{attrs:{href:"#what-to-know"}},[t._v("What to know")]),e("ul",[e("li",[e("a",{attrs:{href:"#application-multi-serve"}},[t._v("Application multi-serve")])]),e("li",[e("a",{attrs:{href:"#👶-beta-feature-new-path-parameter-type-file-extensions"}},[t._v("👶 BETA FEATURE - New path parameter type: file extensions")])]),e("li",[e("a",{attrs:{href:"#🚨-breaking-change-path-parameter-matching-of-non-empty-strings"}},[t._v("🚨 BREAKING CHANGE - Path parameter matching of non-empty strings")])]),e("li",[e("a",{attrs:{href:"#🚨-breaking-change-sanic-worker-gunicornworker-has-been-removed"}},[t._v("🚨 BREAKING CHANGE - sanic.worker.GunicornWorker has been removed")])]),e("li",[e("a",{attrs:{href:"#authorization-header-parsing"}},[t._v("Authorization header parsing")])]),e("li",[e("a",{attrs:{href:"#cli-arguments-optionally-injected-into-application-factory"}},[t._v("CLI arguments optionally injected into application factory")])]),e("li",[e("a",{attrs:{href:"#new-reloader-process-listener-events"}},[t._v("New reloader process listener events")])]),e("li",[e("a",{attrs:{href:"#the-event-loop-is-no-longer-a-required-argument-of-a-listener"}},[t._v("The event loop is no longer a required argument of a listener")])]),e("li",[e("a",{attrs:{href:"#removal-debug-mode-does-not-automatically-start-the-reloader"}},[t._v("Removal - Debug mode does not automatically start the reloader")])]),e("li",[e("a",{attrs:{href:"#deprecation-loading-of-lower-case-environment-variables"}},[t._v("Deprecation - Loading of lower case environment variables")])])])]),e("li",[e("a",{attrs:{href:"#news"}},[t._v("News")]),e("ul",[e("li",[e("a",{attrs:{href:"#packt-publishes-new-book-on-sanic-web-development"}},[t._v("Packt publishes new book on Sanic web development")])])])]),e("li",[e("a",{attrs:{href:"#thank-you"}},[t._v("Thank you")])])])]),e("p"),t._v(" "),e("h2",{attrs:{id:"introduction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),e("p",[t._v("This is the first release of the version 22 "),e("RouterLink",{attrs:{to:"/en/org/policies.html#release-schedule"}},[t._v("release cycle")]),t._v(". All of the standard SCO libraries are now entering the same release cycle and will follow the same versioning pattern. Those packages are:")],1),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/sanic-org/sanic-routing",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("sanic-routing")]),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/sanic-org/sanic-testing",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("sanic-testing")]),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/sanic-org/sanic-ext",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("sanic-ext")]),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"what-to-know"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-to-know"}},[t._v("#")]),t._v(" What to know")]),t._v(" "),e("p",[t._v("More details in the "),e("a",{attrs:{href:"https://sanic.readthedocs.io/en/stable/sanic/changelog.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Changelog"),e("OutboundLink")],1),t._v(". Notable new or breaking features, and what to upgrade...")]),t._v(" "),e("h3",{attrs:{id:"application-multi-serve"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#application-multi-serve"}},[t._v("#")]),t._v(" Application multi-serve")]),t._v(" "),e("p",[t._v("The Sanic server now has an API to allow you to run multiple applications side-by-side in the same process. This is done by calling "),e("code",[t._v("app.prepare(...)")]),t._v(" on one or more application instances, one or many times. Each time it should be bound to a unique host/port combination. Then, you begin serving the applications by calling "),e("code",[t._v("Sanic.serve()")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("app "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sanic"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"One"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sanic"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Two"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\napp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepare"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9999")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepare"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9998")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepare"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9997")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepare"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8888")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepare"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8887")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nSanic"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("In the above snippet, there are two applications that will be run concurrently and bound to multiple ports. This feature is "),e("em",[t._v("not")]),t._v(" supported in the CLI.")]),t._v(" "),e("p",[t._v("This pattern is meant to be an alternative to running "),e("code",[t._v("app.run(...)")]),t._v(". It should be noted that "),e("code",[t._v("app.run")]),t._v(" is now just a shorthand for the above pattern and is still fully supported.")]),t._v(" "),e("h3",{attrs:{id:"👶-beta-feature-new-path-parameter-type-file-extensions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#👶-beta-feature-new-path-parameter-type-file-extensions"}},[t._v("#")]),t._v(" 👶 "),e("em",[t._v("BETA FEATURE")]),t._v(" - New path parameter type: file extensions")]),t._v(" "),e("p",[t._v("A very common pattern is to create a route that dynamically generates a file. The endpoint is meant to match on a file with an extension. There is a new path parameter to match files: "),e("code",[t._v("<foo:ext>")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/path/to/<filename:ext>"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),e("p",[t._v("This will catch any pattern that ends with a file extension. You may, however want to expand this by specifying which extensions, and also by using other path parameter types for the file name.")]),t._v(" "),e("p",[t._v("For example, if you want to catch a "),e("code",[t._v(".jpg")]),t._v(" file that is only numbers:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/path/to/<filename=int:ext=jpg>"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),e("p",[t._v("Some potential examples:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("definition")]),t._v(" "),e("th",[t._v("example")]),t._v(" "),e("th",[t._v("filename")]),t._v(" "),e("th",[t._v("extension")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("<file:ext>")]),t._v(" "),e("td",[t._v("page.txt")]),t._v(" "),e("td",[e("code",[t._v('"page"')])]),t._v(" "),e("td",[e("code",[t._v('"txt"')])])]),t._v(" "),e("tr",[e("td",[t._v("<file:ext=jpg>")]),t._v(" "),e("td",[t._v("cat.jpg")]),t._v(" "),e("td",[e("code",[t._v('"cat"')])]),t._v(" "),e("td",[e("code",[t._v('"jpg"')])])]),t._v(" "),e("tr",[e("td",[t._v("<file:ext=jpg|png|gif|svg>")]),t._v(" "),e("td",[t._v("cat.jpg")]),t._v(" "),e("td",[e("code",[t._v('"cat"')])]),t._v(" "),e("td",[e("code",[t._v('"jpg"')])])]),t._v(" "),e("tr",[e("td",[t._v("<file=int:ext>")]),t._v(" "),e("td",[t._v("123.txt")]),t._v(" "),e("td",[e("code",[t._v("123")])]),t._v(" "),e("td",[e("code",[t._v('"txt"')])])]),t._v(" "),e("tr",[e("td",[t._v("<file=int:ext=jpg|png|gif|svg>")]),t._v(" "),e("td",[t._v("123.svg")]),t._v(" "),e("td",[e("code",[t._v("123")])]),t._v(" "),e("td",[e("code",[t._v('"svg"')])])]),t._v(" "),e("tr",[e("td",[t._v("<file=float:ext=tar.gz>")]),t._v(" "),e("td",[t._v("3.14.tar.gz")]),t._v(" "),e("td",[e("code",[t._v("3.14")])]),t._v(" "),e("td",[e("code",[t._v('"tar.gz"')])])])])]),t._v(" "),e("h3",{attrs:{id:"🚨-breaking-change-path-parameter-matching-of-non-empty-strings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#🚨-breaking-change-path-parameter-matching-of-non-empty-strings"}},[t._v("#")]),t._v(" 🚨 "),e("em",[t._v("BREAKING CHANGE")]),t._v(" - Path parameter matching of non-empty strings")]),t._v(" "),e("p",[t._v("A dynamic path parameter will only match on a non-empty string.")]),t._v(" "),e("p",[t._v("Previously a route with a dynamic string parameter ("),e("code",[t._v("/<foo>")]),t._v(" or "),e("code",[t._v("/<foo:str>")]),t._v(") would match on any string, including empty strings. It will now only match a non-empty string. To retain the old behavior, you should use the new parameter type: "),e("code",[t._v("/<foo:strorempty>")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/path/to/<foo:strorempty>"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),e("h3",{attrs:{id:"🚨-breaking-change-sanic-worker-gunicornworker-has-been-removed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#🚨-breaking-change-sanic-worker-gunicornworker-has-been-removed"}},[t._v("#")]),t._v(" 🚨 "),e("em",[t._v("BREAKING CHANGE")]),t._v(" - "),e("code",[t._v("sanic.worker.GunicornWorker")]),t._v(" has been removed")]),t._v(" "),e("p",[t._v("Departing from our normal deprecation policy, the "),e("code",[t._v("GunicornWorker")]),t._v(" was removed as a part of the process of upgrading the Sanic server to include multi-serve. This decision was made largely in part because even while it existed it was not an optimal strategy for deploying Sanic.")]),t._v(" "),e("p",[t._v("If you want to deploy Sanic using "),e("code",[t._v("gunicorn")]),t._v(", then you are advised to do it using "),e("a",{attrs:{href:"https://www.uvicorn.org/#running-with-gunicorn",target:"_blank",rel:"noopener noreferrer"}},[t._v("the strategy implemented by "),e("code",[t._v("uvicorn")]),e("OutboundLink")],1),t._v(". This will effectively run Sanic as an ASGI application through "),e("code",[t._v("uvicorn")]),t._v(". You can upgrade to this pattern by installing "),e("code",[t._v("uvicorn")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pip install uvicorn\n")])])]),e("p",[t._v("Then, you should be able to run it with a pattern like this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("gunicorn path.to.sanic:app -k uvicorn.workers.UvicornWorker\n")])])]),e("h3",{attrs:{id:"authorization-header-parsing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#authorization-header-parsing"}},[t._v("#")]),t._v(" Authorization header parsing")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("Authorization")]),t._v(" header has been partially parseable for some time now. You have been able to use "),e("code",[t._v("request.token")]),t._v(" to gain access to a header that was in one of the following two forms:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Authorization: Token <SOME TOKEN HERE>\nAuthorization: Bearer <SOME TOKEN HERE>\n")])])]),e("p",[t._v("Sanic can now parse more credential types like "),e("code",[t._v("BASIC")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Authorization: Basic Z2lsLWJhdGVzOnBhc3N3b3JkMTIz\n")])])]),e("p",[t._v("This can be accessed now as "),e("code",[t._v("request.credentials")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("credentials"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Credentials(auth_type='Basic', token='Z2lsLWJhdGVzOnBhc3N3b3JkMTIz', _username='gil-bates', _password='password123')")]),t._v("\n")])])]),e("h3",{attrs:{id:"cli-arguments-optionally-injected-into-application-factory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cli-arguments-optionally-injected-into-application-factory"}},[t._v("#")]),t._v(" CLI arguments optionally injected into application factory")]),t._v(" "),e("p",[t._v("Sanic will now attempt to inject the parsed CLI arguments into your factory if you are using one.")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("create_app")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sanic"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyApp"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" app\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$sanic p:create_app --factory\nNamespace(module='p:create_app', factory=True, simple=False, host='127.0.0.1', port=8000, unix='', cert=None, key=None, tls=None, tlshost=False, workers=1, fast=False, access_log=False, debug=False, auto_reload=False, path=None, dev=False, motd=True, verbosity=None, noisy_exceptions=False)\n")])])]),e("p",[t._v("If you are running the CLI with "),e("code",[t._v("--factory")]),t._v(", you also have the option of passing arbitrary arguments to the command, which will be injected into the argument "),e("code",[t._v("Namespace")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sanic p:create_app --factory --foo=bar\nNamespace(module='p:create_app', factory=True, simple=False, host='127.0.0.1', port=8000, unix='', cert=None, key=None, tls=None, tlshost=False, workers=1, fast=False, access_log=False, debug=False, auto_reload=False, path=None, dev=False, motd=True, verbosity=None, noisy_exceptions=False, foo='bar')\n")])])]),e("h3",{attrs:{id:"new-reloader-process-listener-events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#new-reloader-process-listener-events"}},[t._v("#")]),t._v(" New reloader process listener events")]),t._v(" "),e("p",[t._v("When running Sanic server with auto-reload, there are two new events that trigger a listener "),e("em",[t._v("only")]),t._v(" on the reloader process:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("reload_process_start")])]),t._v(" "),e("li",[e("code",[t._v("reload_process_stop")])])]),t._v(" "),e("p",[t._v("These are only triggered if the reloader is running.")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reload_process_start")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reload_start")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('">>>>>> reload_start <<<<<<"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reload_process_stop")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reload_stop")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('">>>>>> reload_stop <<<<<<"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"the-event-loop-is-no-longer-a-required-argument-of-a-listener"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-event-loop-is-no-longer-a-required-argument-of-a-listener"}},[t._v("#")]),t._v(" The event loop is no longer a required argument of a listener")]),t._v(" "),e("p",[t._v("You can leave out the "),e("code",[t._v("loop")]),t._v(" argument of a listener. Both of these examples work as expected:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("before_server_start")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("without")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("before_server_start")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("with")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" loop"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),e("h3",{attrs:{id:"removal-debug-mode-does-not-automatically-start-the-reloader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#removal-debug-mode-does-not-automatically-start-the-reloader"}},[t._v("#")]),t._v(" Removal - Debug mode does not automatically start the reloader")]),t._v(" "),e("p",[t._v("When running with "),e("code",[t._v("--debug")]),t._v(" or "),e("code",[t._v("debug=True")]),t._v(", the Sanic server will not automatically start the auto-reloader. This feature of doing both on debug was deprecated in v21 and removed in this release. If you would like to have "),e("em",[t._v("both")]),t._v(" debug mode and auto-reload, you can use "),e("code",[t._v("--dev")]),t._v(" or "),e("code",[t._v("dev=True")]),t._v(".")]),t._v(" "),e("p",[e("strong",[t._v("dev = debug mode + auto reloader")])]),t._v(" "),e("h3",{attrs:{id:"deprecation-loading-of-lower-case-environment-variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deprecation-loading-of-lower-case-environment-variables"}},[t._v("#")]),t._v(" Deprecation - Loading of lower case environment variables")]),t._v(" "),e("p",[t._v("Sanic loads prefixed environment variables as configuration values. It has not distinguished between uppercase and lowercase as long as the prefix matches. However, it has always been the convention that the keys should be uppercase. This is deprecated and you will receive a warning if the value is not uppercase. In v22.9 only uppercase and prefixed keys will be loaded.")]),t._v(" "),e("h2",{attrs:{id:"news"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#news"}},[t._v("#")]),t._v(" News")]),t._v(" "),e("h3",{attrs:{id:"packt-publishes-new-book-on-sanic-web-development"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#packt-publishes-new-book-on-sanic-web-development"}},[t._v("#")]),t._v(" Packt publishes new book on Sanic web development")]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("p",[t._v("There is a new book on "),e("strong",[t._v("Python Web Development with Sanic")]),t._v(" by "),e("a",{attrs:{href:"https://github.com/ahopkins",target:"_blank",rel:"noopener noreferrer"}},[t._v("@ahopkins"),e("OutboundLink")],1),t._v(". The book is endorsed by the SCO and part of the proceeds of all sales go directly to the SCO for further development of Sanic.")]),t._v(" "),e("p",[t._v("You can learn more at "),e("a",{attrs:{href:"https://sanicbook.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("sanicbook.com"),e("OutboundLink")],1)])]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("p",[e("img",{attrs:{src:"https://sanicbook.com/images/SanicCoverFinal.png",alt:"Python Web Development with Sanic"}})])])]),t._v(" "),e("h2",{attrs:{id:"thank-you"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#thank-you"}},[t._v("#")]),t._v(" Thank you")]),t._v(" "),e("p",[t._v("Thank you to everyone that participated in this release: 👏")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/aericson",target:"_blank",rel:"noopener noreferrer"}},[t._v("@aericson"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/ahankinson",target:"_blank",rel:"noopener noreferrer"}},[t._v("@ahankinson"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/ahopkins",target:"_blank",rel:"noopener noreferrer"}},[t._v("@ahopkins"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/ariebovenberg",target:"_blank",rel:"noopener noreferrer"}},[t._v("@ariebovenberg"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/ashleysommer",target:"_blank",rel:"noopener noreferrer"}},[t._v("@ashleysommer"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/Bluenix2",target:"_blank",rel:"noopener noreferrer"}},[t._v("@Bluenix2"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/ChihweiLHBird",target:"_blank",rel:"noopener noreferrer"}},[t._v("@ChihweiLHBird"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/dotlambda",target:"_blank",rel:"noopener noreferrer"}},[t._v("@dotlambda"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/eric-spitler",target:"_blank",rel:"noopener noreferrer"}},[t._v("@eric-spitler"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/howzitcdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("@howzitcdf"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/jonra1993",target:"_blank",rel:"noopener noreferrer"}},[t._v("@jonra1993"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/prryplatypus",target:"_blank",rel:"noopener noreferrer"}},[t._v("@prryplatypus"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/raphaelauv",target:"_blank",rel:"noopener noreferrer"}},[t._v("@raphaelauv"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/SaidBySolo",target:"_blank",rel:"noopener noreferrer"}},[t._v("@SaidBySolo"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/SerGeRybakov",target:"_blank",rel:"noopener noreferrer"}},[t._v("@SerGeRybakov"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.com/Tronic",target:"_blank",rel:"noopener noreferrer"}},[t._v("@Tronic"),e("OutboundLink")],1)]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("If you enjoy the project, please consider contributing. Of course we love code contributions, but we also love contributions in any form. Consider writing some documentation, showing off use cases, joining conversations and making your voice known, and if you are able: "),e("a",{attrs:{href:"https://opencollective.com/sanic-org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("financial contributions"),e("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);e.default=s.exports}}]);
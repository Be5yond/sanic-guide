(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{391:function(t,a,e){"use strict";e.r(a);var s=e(5),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"running-sanic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-sanic"}},[t._v("#")]),t._v(" Running Sanic")]),t._v(" "),a("p",[t._v("Sanic ships with its own internal web server. Under most circumstances, this is the preferred method for deployment. In addition, you can also deploy Sanic as an ASGI app bundled with an ASGI-able web server.")]),t._v(" "),a("h2",{attrs:{id:"sanic-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sanic-server"}},[t._v("#")]),t._v(" Sanic Server")]),t._v(" "),a("p",[t._v("The main way to run Sanic is to use the included "),a("a",{attrs:{href:"#sanic-cli"}},[t._v("CLI")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic path.to.server:app\n")])])]),a("p",[t._v("In this example, Sanic is instructed to look for a python module called "),a("code",[t._v("path.to.server")]),t._v(". Inside of that module, it will look for a global variable called "),a("code",[t._v("app")]),t._v(", which should be an instance of "),a("code",[t._v("Sanic(...)")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ./path/to/server.py")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sanic "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Sanic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" json\n\napp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sanic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TestApp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" json"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("You may also dropdown to the "),a("a",{attrs:{href:"#low-level-apprun"}},[t._v("lower level API")]),t._v(" to call "),a("code",[t._v("app.run")]),t._v(" as a script. However, if you choose this option you should be more comfortable handling issues that may arise with "),a("code",[t._v("multiprocessing")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"workers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workers"}},[t._v("#")]),t._v(" Workers")]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("By default, Sanic runs a main process and a single worker process (see "),a("RouterLink",{attrs:{to:"/en/guide/deployment/manager.html"}},[t._v("worker manager")]),t._v(" for more details).")],1),t._v(" "),a("p",[t._v("To crank up the juice, just specify the number of workers in the run arguments.")])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic server:app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--host")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--workers")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("Sanic will automatically spin up multiple processes and route traffic between them. We recommend as many workers as you have available processors.")]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("The easiest way to get the maximum CPU performance is to use the "),a("code",[t._v("--fast")]),t._v(" option. This will automatically run the maximum number of workers given the system constraints.")]),t._v(" "),a("p",[a("em",[t._v("Added in v21.12")])])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic server:app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--host")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--fast")]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("In version 22.9, Sanic introduced a new worker manager to provide more consistency and flexibility between development and production servers. Read "),a("RouterLink",{attrs:{to:"/en/guide/deployment/manager.html"}},[t._v("about the manager")]),t._v(" for more details about workers.")],1),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("If you only want to run Sanic with a single process, specify "),a("code",[t._v("single_process")]),t._v(" in the run arguments. This means that auto-reload, and the worker manager will be unavailable.")]),t._v(" "),a("p",[a("em",[t._v("Added in v22.9")])])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic server:app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--host")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),t._v(" --single-process\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"running-via-command"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-via-command"}},[t._v("#")]),t._v(" Running via command")]),t._v(" "),a("h4",{attrs:{id:"sanic-cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sanic-cli"}},[t._v("#")]),t._v(" Sanic CLI")]),t._v(" "),a("p",[t._v("Use "),a("code",[t._v("sanic --help")]),t._v(" to see all the options.")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("Sanic CLI help output")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ sanic --help\n\n   ▄███ █████ ██      ▄█▄      ██       █   █   ▄██████████\n  ██                 █   █     █ ██     █   █  ██\n   ▀███████ ███▄    ▀     █    █   ██   ▄   █  ██\n               ██  █████████   █     ██ █   █  ▄▄\n  ████ ████████▀  █         █  █       ██   █   ▀██ ███████\n\n\n To start running a Sanic application, provide a path to the module, where\n app is a Sanic() instance:\n\n     $ sanic path.to.server:app\n\n Or, a path to a callable that returns a Sanic() instance:\n\n     $ sanic path.to.factory:create_app --factory\n\n Or, a path to a directory to run as a simple HTTP server:\n\n     $ sanic ./path/to/static --simple\n\nRequired\n========\n  Positional:\n    module              Path to your Sanic app. Example: path.to.server:app\n                        If running a Simple Server, path to directory to serve. Example: ./\n\nOptional\n========\n  General:\n    -h, --help          show this help message and exit\n    --version           show program's version number and exit\n\n  Application:\n    --factory           Treat app as an application factory, i.e. a () -> &lt;Sanic app> callable\n    -s, --simple        Run Sanic as a Simple Server, and serve the contents of a directory\n                        (module arg should be a path)\n    --inspect           Inspect the state of a running instance, human readable\n    --inspect-raw       Inspect the state of a running instance, JSON output\n    --trigger-reload    Trigger worker processes to reload\n    --trigger-shutdown  Trigger all processes to shutdown\n\n  HTTP version:\n    --http {1,3}        Which HTTP version to use: HTTP/1.1 or HTTP/3. Value should\n                        be either 1, or 3. [default 1]\n    -1                  Run Sanic server using HTTP/1.1\n    -3                  Run Sanic server using HTTP/3\n\n  Socket binding:\n    -H HOST, --host HOST\n                        Host address [default 127.0.0.1]\n    -p PORT, --port PORT\n                        Port to serve on [default 8000]\n    -u UNIX, --unix UNIX\n                        location of unix socket\n\n  TLS certificate:\n    --cert CERT         Location of fullchain.pem, bundle.crt or equivalent\n    --key KEY           Location of privkey.pem or equivalent .key file\n    --tls DIR           TLS certificate folder with fullchain.pem and privkey.pem\n                        May be specified multiple times to choose multiple certificates\n    --tls-strict-host   Only allow clients that send an SNI matching server certs\n\n  Worker:\n    -w WORKERS, --workers WORKERS\n                        Number of worker processes [default 1]\n    --fast              Set the number of workers to max allowed\n    --single-process    Do not use multiprocessing, run server in a single process\n    --legacy            Use the legacy server manager\n    --access-logs       Display access logs\n    --no-access-logs    No display access logs\n\n  Development:\n    --debug             Run the server in debug mode\n    -r, --reload, --auto-reload\n                        Watch source directory for file changes and reload on changes\n    -R PATH, --reload-dir PATH\n                        Extra directories to watch and reload on changes\n    -d, --dev           debug + auto reload\n    --auto-tls          Create a temporary TLS certificate for local development (requires mkcert or trustme)\n\n  Output:\n    --coffee            Uhm, coffee?\n    --no-coffee         No uhm, coffee?\n    --motd              Show the startup display\n    --no-motd           No show the startup display\n    -v, --verbosity     Control logging noise, eg. -vv or --verbosity=2 [default 0]\n    --noisy-exceptions  Output stack traces for all exceptions\n    --no-noisy-exceptions\n                        No output stack traces for all exceptions\n\n")])])])]),t._v(" "),a("h4",{attrs:{id:"as-a-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#as-a-module"}},[t._v("#")]),t._v(" As a module")]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("Sanic applications can also be called directly as a module.")])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("python "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" sanic server.app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--host")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--workers")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])])])]),t._v(" "),a("h4",{attrs:{id:"using-a-factory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-a-factory"}},[t._v("#")]),t._v(" Using a factory")]),t._v(" "),a("p",[t._v("A very common solution is to develop your application "),a("em",[t._v("not")]),t._v(' as a global variable, but instead using the factory pattern. In this context, "factory" means a function that returns an instance of '),a("code",[t._v("Sanic(...)")]),t._v(".")]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("Suppose that you have this in your "),a("code",[t._v("server.py")])])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sanic "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Sanic\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create_app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Sanic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sanic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyApp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" app\n")])])])])]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("You can run this application now by referencing it in the CLI explicitly as a factory:")])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic server:create_app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--factory")]),t._v("\n")])])]),a("p",[t._v("Or, explicitly like this:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"server:create_app()"')]),t._v("\n")])])]),a("div",{staticClass:"custom-block new"},[a("p",{staticClass:"custom-block-title"},[t._v("NEW in v23.3")]),t._v(" "),a("p",[t._v("Or, implicitly like this:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic server:create_app\n")])])])])])]),t._v(" "),a("h3",{attrs:{id:"low-level-app-run"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#low-level-app-run"}},[t._v("#")]),t._v(" Low level "),a("code",[t._v("app.run")])]),t._v(" "),a("p",[t._v("When using "),a("code",[t._v("app.run")]),t._v(" you will just call your Python file like any other script.")]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[a("code",[t._v("app.run")]),t._v(" must be properly nested inside of a name-main block.")])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# server.py")]),t._v("\napp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sanic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyApp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("DANGER")]),t._v(" "),a("p",[t._v("Be "),a("em",[t._v("careful")]),t._v(" when using this pattern. A very common mistake is to put too much logic inside of the "),a("code",[t._v('if __name__ == "__main__":')]),t._v(" block.")]),t._v(" "),a("p",[t._v("🚫 This is a mistake")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sanic "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Sanic\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" my"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("module "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" bp\n\napp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sanic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyApp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("blueprint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("If you do this, your "),a("RouterLink",{attrs:{to:"/en/guide/best-practices/blueprints.html"}},[t._v("blueprint")]),t._v(" will not be attached to your application. This is because the "),a("code",[t._v("__main__")]),t._v(" block will only run on Sanic's main worker process, "),a("strong",[t._v("NOT")]),t._v(" any of its "),a("RouterLink",{attrs:{to:"/en/guide/deployment/manager.html"}},[t._v("worker processes")]),t._v(". This goes for anything else that might impact your application (like attaching listeners, signals, middleware, etc). The only safe operations are anything that is meant for the main process, like the "),a("code",[t._v("app.main_*")]),t._v(" listeners.")],1),t._v(" "),a("p",[t._v("Perhaps something like this is more appropriate:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sanic "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Sanic\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" my"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("module "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" bp\n\napp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sanic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyApp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__mp_main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("blueprint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("p",[t._v("To use the low-level "),a("code",[t._v("run")]),t._v(" API, after defining an instance of "),a("code",[t._v("sanic.Sanic")]),t._v(", we can call the run method with the following keyword arguments:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Parameter")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Default")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("host")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v('"127.0.0.1"')])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Address to host the server on.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("port")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("8000")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Port to host the server on.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("unix")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("None")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Unix socket name to host the server on (instead of TCP).")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("debug")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("False")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Enables debug output (slows server).")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("ssl")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("None")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("SSLContext for SSL encryption of worker(s).")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("sock")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("None")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Socket for the server to accept connections from.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("workers")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("1")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Number of worker processes to spawn. Cannot be used with fast.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("loop")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("None")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("An asyncio-compatible event loop. If none is specified, Sanic creates its own event loop.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("protocol")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("HttpProtocol")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Subclass of asyncio.protocol.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("access_log")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("True")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Enables log on handling requests (significantly slows server).")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("reload_dir")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("None")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("A path or list of paths to directories the auto-reloader should watch.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("noisy_exceptions")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("None")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Whether to set noisy exceptions globally. None means leave as default.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("motd")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("True")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Whether to display the startup message.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("motd_display")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("None")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("A dict with extra key/value information to display in the startup message")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("fast")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("False")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Whether to maximize worker processes.  Cannot be used with workers.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("verbosity")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("0")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Level of logging detail. Max is 2.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("auto_tls")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("False")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Whether to auto-create a TLS certificate for local development. Not for production.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("single_process")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("False")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Whether to run Sanic in a single process.")])])])]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("For example, we can turn off the access log in order to increase performance, and bind to a custom host and port.")])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# server.py")]),t._v("\napp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sanic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyApp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" access_log"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("Now, just execute the python script that has "),a("code",[t._v("app.run(...)")])])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("python server.py\n")])])])])]),t._v(" "),a("p",[t._v("For a slightly more advanced implementation, it is good to know that "),a("code",[t._v("app.run")]),t._v(" will call "),a("code",[t._v("app.prepare")]),t._v(" and "),a("code",[t._v("Sanic.serve")]),t._v(" under the hood.")]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("Therefore, these are equivalent:")])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" access_log"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" access_log"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Sanic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("This can be useful if you need to bind your appliction(s) to multiple ports.")])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9990")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    app1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9991")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    app2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5555")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Sanic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"sanic-simple-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sanic-simple-server"}},[t._v("#")]),t._v(" Sanic Simple Server")]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("Sometimes you just have a directory of static files that need to be served. This especially can be handy for quickly standing up a localhost server. Sanic ships with a Simple Server, where you only need to point it at a directory.")])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic ./path/to/dir "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--simple")]),t._v("\n")])])])])]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("This could also be paired with auto-reloading.")])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic ./path/to/dir "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--simple")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--reload")]),t._v(" --reload-dir"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("./path/to/dir\n")])])])])]),t._v(" "),a("p",[a("em",[t._v("Added in v21.6")])]),t._v(" "),a("h3",{attrs:{id:"http-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-3"}},[t._v("#")]),t._v(" HTTP/3")]),t._v(" "),a("p",[t._v("Sanic server offers HTTP/3 support using "),a("a",{attrs:{href:"https://github.com/aiortc/aioquic",target:"_blank",rel:"noopener noreferrer"}},[t._v("aioquic"),a("OutboundLink")],1),t._v(". This "),a("strong",[t._v("must")]),t._v(" be installed to use HTTP/3:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("pip "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" sanic aioquic\n")])])]),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("pip "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" sanic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("http3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("To start HTTP/3, you must explicitly request it when running your application.")]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic path.to.server:app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--http")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])])]),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic path.to.server:app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-3")]),t._v("\n")])])])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("To run both an HTTP/3 and HTTP/1.1 server simultaneously, you can use "),a("RouterLink",{attrs:{to:"/en/guide/release-notes/v22.3.html#application-multi-serve"}},[t._v("application multi-serve")]),t._v(" introduced in v22.3. This will automatically add an "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Alt-Svc",target:"_blank",rel:"noopener noreferrer"}},[t._v("Alt-Svc"),a("OutboundLink")],1),t._v(" header to your HTTP/1.1 requests to let the client know that it is also available as HTTP/3.")],1),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic path.to.server:app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--http")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--http")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic path.to.server:app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-1")]),t._v("\n")])])])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nSanic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("Because HTTP/3 requires TLS, you cannot start a HTTP/3 server without a TLS certificate. You should "),a("RouterLink",{attrs:{to:"/en/guide/how-to/tls.html"}},[t._v("set it up yourself")]),t._v(" or use "),a("code",[t._v("mkcert")]),t._v(" if in "),a("code",[t._v("DEBUG")]),t._v(" mode. Currently, automatic TLS setup for HTTP/3 is not compatible with "),a("code",[t._v("trustme")]),t._v(". See "),a("RouterLink",{attrs:{to:"/en/guide/deployment/development.html"}},[t._v("development")]),t._v(" for more details.")],1),t._v(" "),a("p",[a("em",[t._v("Added in v22.6")])]),t._v(" "),a("h2",{attrs:{id:"asgi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#asgi"}},[t._v("#")]),t._v(" ASGI")]),t._v(" "),a("p",[t._v("Sanic is also ASGI-compliant. This means you can use your preferred ASGI webserver to run Sanic. The three main implementations of ASGI are "),a("a",{attrs:{href:"http://github.com/django/daphne",target:"_blank",rel:"noopener noreferrer"}},[t._v("Daphne"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://www.uvicorn.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Uvicorn"),a("OutboundLink")],1),t._v(", and "),a("a",{attrs:{href:"https://pgjones.gitlab.io/hypercorn/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hypercorn"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Daphne does not support the ASGI "),a("code",[t._v("lifespan")]),t._v(" protocol, and therefore cannot be used to run Sanic. See "),a("a",{attrs:{href:"https://github.com/django/daphne/issues/264",target:"_blank",rel:"noopener noreferrer"}},[t._v("Issue #264"),a("OutboundLink")],1),t._v(" for more details.")])]),t._v(" "),a("p",[t._v("Follow their documentation for the proper way to run them, but it should look something like:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("uvicorn myapp:app\n")])])]),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("hypercorn myapp:app\n")])])]),a("p",[t._v("A couple things to note when using ASGI:")]),t._v(" "),a("ol",[a("li",[t._v("When using the Sanic webserver, websockets will run using the "),a("code",[t._v("websockets")]),t._v(" package. In ASGI mode, there is no need for this package since websockets are managed in the ASGI server.")]),t._v(" "),a("li",[t._v("The ASGI lifespan protocol "),a("a",{attrs:{href:"https://asgi.readthedocs.io/en/latest/specs/lifespan.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://asgi.readthedocs.io/en/latest/specs/lifespan.html"),a("OutboundLink")],1),t._v(", supports only two server events: startup and shutdown. Sanic has four: before startup, after startup, before shutdown, and after shutdown. Therefore, in ASGI mode, the startup and shutdown events will run consecutively and not actually around the server process beginning and ending (since that is now controlled by the ASGI server). Therefore, it is best to use "),a("code",[t._v("after_server_start")]),t._v(" and "),a("code",[t._v("before_server_stop")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"trio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trio"}},[t._v("#")]),t._v(" Trio")]),t._v(" "),a("p",[t._v("Sanic has experimental support for running on Trio with:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("hypercorn "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-k")]),t._v(" trio myapp:app\n")])])]),a("h2",{attrs:{id:"gunicorn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gunicorn"}},[t._v("#")]),t._v(" Gunicorn")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://gunicorn.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gunicorn"),a("OutboundLink")],1),t._v(' ("Green Unicorn") is a WSGI HTTP Server for UNIX based operating systems. It is a pre-fork worker model ported from Ruby’s Unicorn project.')]),t._v(" "),a("p",[t._v("In order to run Sanic application with Gunicorn, you need to use it with the adapter from "),a("a",{attrs:{href:"https://www.uvicorn.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("uvicorn"),a("OutboundLink")],1),t._v(". Make sure uvicorn is installed and run it with "),a("code",[t._v("uvicorn.workers.UvicornWorker")]),t._v(" for Gunicorn worker-class argument:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("gunicorn myapp:app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--bind")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:1337 --worker-class uvicorn.workers.UvicornWorker\n")])])]),a("p",[t._v("See the "),a("a",{attrs:{href:"http://docs.gunicorn.org/en/latest/settings.html#max-requests",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gunicorn Docs"),a("OutboundLink")],1),t._v(" for more information.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("It is generally advised to not use "),a("code",[t._v("gunicorn")]),t._v(" unless you need it. The Sanic Server is primed for running Sanic in production. Weigh your considerations carefully before making this choice. Gunicorn does provide a lot of configuration options, but it is not the best choice for getting Sanic to run at its fastest.")])]),t._v(" "),a("h2",{attrs:{id:"performance-considerations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#performance-considerations"}},[t._v("#")]),t._v(" Performance considerations")]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("When running in production, make sure you turn off "),a("code",[t._v("debug")]),t._v(".")])]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic path.to.server:app\n")])])])])]),t._v(" "),a("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("p",[t._v("Sanic will also perform fastest if you turn off "),a("code",[t._v("access_log")]),t._v(".")]),t._v(" "),a("p",[t._v("If you still require access logs, but want to enjoy this performance boost, consider using "),a("RouterLink",{attrs:{to:"/en/guide/deployment/nginx.html"}},[t._v("Nginx as a proxy")]),t._v(", and letting that handle your access logging. It will be much faster than anything Python can handle.")],1)]),t._v(" "),a("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("sanic path.to.server:app --no-access-logs\n")])])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);
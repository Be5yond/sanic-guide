(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{375:function(t,s,e){"use strict";e.r(s);var a=e(4),n=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"worker-manager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-manager"}},[t._v("#")]),t._v(" Worker Manager")]),t._v(" "),s("div",{staticClass:"custom-block new"},[s("p",{staticClass:"custom-block-title"},[t._v("NEW in v22.9")]),t._v(" "),s("p",[t._v("The worker manager and its functionality was introduced in version 22.9.")]),t._v(" "),s("p",[s("em",[t._v("The details of this section are intended for more advanced usages and "),s("strong",[t._v("not")]),t._v(" necessary to get started.")])])]),t._v(" "),s("p",[t._v("The purpose of the manager is to create consistency and flexibility between development and production environments. Whether you intend to run a single worker, or multiple workers, whether with, or without auto-reload: the experience will be the same.")]),t._v(" "),s("p",[t._v("In general it looks like this:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-images.githubusercontent.com/166269/178677618-3b4089c3-6c6a-4ecc-8d7a-7eba2a7f29b0.png",alt:""}})]),t._v(" "),s("p",[t._v("When you run Sanic, the main process instantiates a "),s("code",[t._v("WorkerManager")]),t._v(". That manager is in charge of running one or more "),s("code",[t._v("WorkerProcess")]),t._v(". There generally are two kinds of processes:")]),t._v(" "),s("ul",[s("li",[t._v("server processes, and")]),t._v(" "),s("li",[t._v("non-server processes.")])]),t._v(" "),s("p",[t._v('For the sake of ease, the User Guide generally will use the term "worker" or "worker process" to mean a server process, and "Manager" to mean the single worker manager running in your main process.')]),t._v(" "),s("h2",{attrs:{id:"how-sanic-server-starts-processes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-sanic-server-starts-processes"}},[t._v("#")]),t._v(" How Sanic Server starts processes")]),t._v(" "),s("p",[t._v("Sanic will start processes using the "),s("a",{attrs:{href:"https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods",target:"_blank",rel:"noopener noreferrer"}},[t._v("spawn"),s("OutboundLink")],1),t._v(" start method. This means that for every process/worker, the global scope of your application will be run on its own thread. The practical impact of this that "),s("em",[t._v("if")]),t._v(" you do not run Sanic with the CLI, you will need to nest the execution code inside a block to make sure it only runs on "),s("code",[t._v("__main__")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("If you do not, you are likely to see an error message like this:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('sanic.exceptions.ServerError: Sanic server could not start: [Errno 98] Address already in use.\n\nThis may have happened if you are running Sanic in the global scope and not inside of a `if __name__ == "__main__"` block.\n\nSee more information: https://sanic.dev/en/guide/deployment/manager.html#how-sanic-server-starts-processes\n')])])]),s("p",[t._v("The likely fix for this problem is nesting your Sanic run call inside of the "),s("code",[t._v('__name__ == "__main__"')]),t._v(" block. If you continue to receive this message after nesting, or if you see this while using the CLI, then it means the port you are trying to use is not available on your machine and you must select another port.")]),t._v(" "),s("h3",{attrs:{id:"starting-a-worker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#starting-a-worker"}},[t._v("#")]),t._v(" Starting a worker")]),t._v(" "),s("p",[t._v("All worker processes "),s("em",[t._v("must")]),t._v(" send an acknowledgement when starting. This happens under the hood, and you as a developer do not need to do anything. However, the Manager will exist with a status code "),s("code",[t._v("1")]),t._v(" if one or more workers do not send that "),s("code",[t._v("ack")]),t._v(" message. By default, the Manager will wait for five (5) seconds to receive the "),s("code",[t._v("ack")]),t._v(".")]),t._v(" "),s("p",[t._v("If your application crashes after five (5) seconds, likely the issue is some inability for your workers to start. You should review the traceback for errors related to your code.")]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("In the situation when you know that you will need more than five (5) seconds to start, you can monkeypatch the Manager. The threshold does not include anything inside of a listener, and is limited to the execution time of everything in the global scope of your application.")]),t._v(" "),s("p",[t._v("If you run into this issue, it may indicate a need to look deeper into what is causing the slow startup.")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sanic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("manager "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" WorkerManager\n\nWorkerManager"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("THRESHOLD "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Value is in 0.1s")]),t._v("\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"using-shared-context-between-worker-processes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-shared-context-between-worker-processes"}},[t._v("#")]),t._v(" Using shared context between worker processes")]),t._v(" "),s("p",[t._v("Python provides a few methods for "),s("a",{attrs:{href:"https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes",target:"_blank",rel:"noopener noreferrer"}},[t._v("exchanging objects"),s("OutboundLink")],1),t._v(", "),s("a",{attrs:{href:"https://docs.python.org/3/library/multiprocessing.html#synchronization-between-processes",target:"_blank",rel:"noopener noreferrer"}},[t._v("synchronizing"),s("OutboundLink")],1),t._v(", and "),s("a",{attrs:{href:"https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes",target:"_blank",rel:"noopener noreferrer"}},[t._v("sharing state"),s("OutboundLink")],1),t._v(" between processes. This usually involves objects from the "),s("code",[t._v("multiprocessing")]),t._v(" and "),s("code",[t._v("ctypes")]),t._v(" modules.")]),t._v(" "),s("p",[t._v("If you are familiar with these objects and how to work with them, you will be happy to know that Sanic provides an API for sharing these objects between your worker processes. If you are not familiar, you are encouraged to read through the Python documentation linked above and try some of the examples before proceeding with implementing shared context.")]),t._v(" "),s("p",[t._v("Similar to how "),s("RouterLink",{attrs:{to:"/en/guide/basics/app.html#application-context"}},[t._v("application context")]),t._v(" allows an applicaiton to share state across the lifetime of the application with "),s("code",[t._v("app.ctx")]),t._v(", shared context provides the same for the special objects mentioned above. This context is available as "),s("code",[t._v("app.shared_ctx")]),t._v(" and should "),s("strong",[t._v("ONLY")]),t._v(" be used to share objects intended for this purpose.")],1),t._v(" "),s("p",[t._v("The "),s("code",[t._v("shared_ctx")]),t._v(" will:")]),t._v(" "),s("ul",[s("li",[s("em",[t._v("NOT")]),t._v(" share regular objects like "),s("code",[t._v("int")]),t._v(", "),s("code",[t._v("dict")]),t._v(", or "),s("code",[t._v("list")])]),t._v(" "),s("li",[s("em",[t._v("NOT")]),t._v(" share state between Sanic instances running on different machines")]),t._v(" "),s("li",[s("em",[t._v("NOT")]),t._v(" share state to non-worker processes")]),t._v(" "),s("li",[s("strong",[t._v("only")]),t._v(" share state between workers managed by the same Manager")])]),t._v(" "),s("p",[t._v("Attaching an inappropriate object to "),s("code",[t._v("shared_ctx")]),t._v(" will likely result in a warning, and not an error. You should be careful to not accidentally add an unsafe object to "),s("code",[t._v("shared_ctx")]),t._v(" as it may not work as expected. If you are directed here because of one of those warnings, you might have accidentally used an unsafe object in "),s("code",[t._v("shared_ctx")]),t._v(".")]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("In order to create a shared object you "),s("strong",[t._v("must")]),t._v(" create it in the main process and attach it inside of the "),s("code",[t._v("main_process_start")]),t._v(" listener.")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" multiprocessing "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Queue\n\n"),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("main_process_start")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main_process_start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shared_ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("queue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("p",[t._v("Trying to attach to the "),s("code",[t._v("shared_ctx")]),t._v(" object outside of this listener may result in a "),s("code",[t._v("RuntimeError")]),t._v(".")]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("After creating the objects in the "),s("code",[t._v("main_process_start")]),t._v(" listener and attaching to the "),s("code",[t._v("shared_ctx")]),t._v(", they will be available in your workers wherever the application instance is available (example: listeners, middleware, request handlers).")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" multiprocessing "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Queue\n\n"),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shared_ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("put"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"access-to-the-multiplexer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#access-to-the-multiplexer"}},[t._v("#")]),t._v(" Access to the multiplexer")]),t._v(" "),s("p",[t._v("The application instance has access to an object that provides access to interacting with the Manager and other worker processes. The object is attached as the "),s("code",[t._v("app.multiplexer")]),t._v(" property, but it is more easily accessed by its alias: "),s("code",[t._v("app.m")]),t._v(".")]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("For example, you can get access to the current worker state.")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("on_request")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print_state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Sanic-Server-0-0\n99999\n{'server': True, 'state': 'ACKED', 'pid': 99999, 'start_at': datetime.datetime(2022, 10, 1, 0, 0, 0, 0, tzinfo=datetime.timezone.utc), 'starts': 2, 'restart_at': datetime.datetime(2022, 10, 1, 0, 0, 12, 861332, tzinfo=datetime.timezone.utc)}\n")])])])])]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("The "),s("code",[t._v("multiplexer")]),t._v(" also has access to terminate the Manager, or restart worker processes")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# shutdown the entire application and all processes")]),t._v("\napp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("terminate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# restart the current worker only")]),t._v("\napp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("restart"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# restart specific workers only (comma delimited)")]),t._v("\napp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("restart"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sanic-Server-4-0,Sanic-Server-7-0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# restart ALL workers")]),t._v("\napp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("restart"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__ALL_PROCESSES__"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"worker-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-state"}},[t._v("#")]),t._v(" Worker state")]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("As shown above, the "),s("code",[t._v("multiplexer")]),t._v(" has access to report upon the state of the current running worker. However, it also contains the state for ALL processes running.")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("on_request")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print_state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("workers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("{\n    'Sanic-Main': {'pid': 99997},\n    'Sanic-Server-0-0': {\n        'server': True,\n        'state': 'ACKED',\n        'pid': 9999,\n        'start_at': datetime.datetime(2022, 10, 1, 0, 0, 0, 0, tzinfo=datetime.timezone.utc),\n        'starts': 2,\n        'restart_at': datetime.datetime(2022, 10, 1, 0, 0, 12, 861332, tzinfo=datetime.timezone.utc)\n    },\n    'Sanic-Reloader-0': {\n        'server': False,\n        'state': 'STARTED',\n        'pid': 99998,\n        'start_at': datetime.datetime(2022, 10, 1, 0, 0, 0, 0, tzinfo=datetime.timezone.utc),\n        'starts': 1\n    }\n}\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"built-in-non-server-processes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#built-in-non-server-processes"}},[t._v("#")]),t._v(" Built-in non-server processes")]),t._v(" "),s("p",[t._v("As mentioned, the Manager also has the ability to run non-server processes. Sanic comes with two built-in types of non-server processes, and allows for "),s("a",{attrs:{href:"#running-custom-processes"}},[t._v("creating custom processes")]),t._v(".")]),t._v(" "),s("p",[t._v("The two built-in processes are")]),t._v(" "),s("ul",[s("li",[t._v("the "),s("RouterLink",{attrs:{to:"/en/guide/deployment/development.html#automatic-reloader"}},[t._v("auto-reloader")]),t._v(", optionally enabled to watch the file system for changes and trigger a restart")],1),t._v(" "),s("li",[s("a",{attrs:{href:"#inspector"}},[t._v("inspector")]),t._v(", optionally enabled to provide external access to the state of the running instance")])]),t._v(" "),s("h2",{attrs:{id:"inspector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inspector"}},[t._v("#")]),t._v(" Inspector")]),t._v(" "),s("p",[t._v("Sanic has the ability to expose the state and the functionality of the "),s("code",[t._v("multiplexer")]),t._v(" to the CLI. Currently, this requires the CLI command to be run on the same machine as the running Sanic instance. By default the inspector is disabled.")]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("To enable it, set the config value to "),s("code",[t._v("True")]),t._v(".")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("INSPECTOR "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n")])])])])]),t._v(" "),s("p",[t._v("You will now have access to execute any of these CLI commands:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    --inspect                      Inspect the state of a running instance, human readable\n    --inspect-raw                  Inspect the state of a running instance, JSON output\n    --trigger-reload               Trigger worker processes to reload\n    --trigger-shutdown             Trigger all processes to shutdown\n")])])]),s("p",[s("img",{attrs:{src:"https://user-images.githubusercontent.com/166269/190099384-2f2f3fae-22d5-4529-b279-8446f6b5f9bd.png",alt:""}})]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("This works by exposing a small TCP socket on your machine. You can control the location using configuration values:")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("INSPECTOR_HOST "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost"')]),t._v("\napp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("INSPECTOR_PORT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6457")]),t._v("\n")])])])])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("The inspector host and port should not be exposed outside of your local network. The protocol is not secured.")]),t._v(" "),s("p",[t._v("It is expected that this will be secured in the future. However, it is advised to not enable this in production unless you are confident that you trust access to the running environment.")])]),t._v(" "),s("h2",{attrs:{id:"running-custom-processes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#running-custom-processes"}},[t._v("#")]),t._v(" Running custom processes")]),t._v(" "),s("p",[t._v("To run a managed custom process on Sanic, you must create a callable. If that process is meant to be long-running, then it should handle a shutdown call by a "),s("code",[t._v("SIGINT")]),t._v(" or "),s("code",[t._v("SIGTERM")]),t._v(" signal.")]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("The simplest method for doing that in Python will be to just wrap your loop in "),s("code",[t._v("KeyboardInterrupt")]),t._v(".")]),t._v(" "),s("p",[t._v("If you intend to run another application, like a bot, then it is likely that it already has capability to handle this signal and you likely do not need to do anything.")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" time "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sleep\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("my_process")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            sleep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" KeyboardInterrupt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"done"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("That callable must be registered in the "),s("code",[t._v("main_process_ready")]),t._v(" listener. It is important to note that is is "),s("strong",[t._v("NOT")]),t._v(" the same location that you should register "),s("a",{attrs:{href:"#using-shared-context-between-worker-processes"}},[t._v("shared context")]),t._v(" objects.")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("main_process_ready")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ready")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Sanic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("manager"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("manage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyProcess"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" my_process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   app.manager.manage(<name>, <callable>, <kwargs>)")]),t._v("\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"single-process-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#single-process-mode"}},[t._v("#")]),t._v(" Single process mode")]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("If you would like to opt out of running multiple processes, you can run Sanic in a single process only. In this case, the Manager will not run. You will also not have access to any features that require processes (auto-reload, the inspector, etc).")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("single_process"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepare"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("single_process"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Sanic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serve_single"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sanic path.to.server:app --single-process\n")])])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{370:function(t,e,a){"use strict";a.r(e);var s=a(4),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"running-sanic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#running-sanic"}},[t._v("#")]),t._v(" Running Sanic")]),t._v(" "),e("p",[t._v("Sanic ships with its own internal web server. Under most circumstances, this is the preferred method for deployment. In addition, you can also deploy Sanic as an ASGI app bundled with an ASGI-able web server, or using gunicorn.")]),t._v(" "),e("h2",{attrs:{id:"sanic-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sanic-server"}},[t._v("#")]),t._v(" Sanic Server")]),t._v(" "),e("p",[t._v("After defining an instance of "),e("code",[t._v("sanic.Sanic")]),t._v(", we can call the run method with the following keyword arguments:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("Parameter")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Default")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("host")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v('"127.0.0.1"')])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Address to host the server on.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("port")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("8000")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Port to host the server on.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("unix")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("None")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Unix socket name to host the server on (instead of TCP).")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("debug")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("False")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Enables debug output (slows server).")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("ssl")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("None")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("SSLContext for SSL encryption of worker(s).")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("sock")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("None")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Socket for the server to accept connections from.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("workers")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("1")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Number of worker processes to spawn.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("loop")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("None")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("An asyncio-compatible event loop. If none is specified, Sanic creates its own event loop.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("protocol")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("HttpProtocol")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Subclass of asyncio.protocol.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("strong",[t._v("access_log")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("True")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Enables log on handling requests (significantly slows server).")])])])]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("p",[t._v("In the above example, we decided to turn off the access log in order to increase performance.")])]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# server.py")]),t._v("\napp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sanic"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My App"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" access_log"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("p",[t._v("Now, just execute the python script that has "),e("code",[t._v("app.run(...)")])])]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("python server.py\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"workers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#workers"}},[t._v("#")]),t._v(" Workers")]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("p",[t._v("By default, Sanic listens in the main process using only one CPU core. To crank up the juice, just specify the number of workers in the run arguments.")])]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workers"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),e("p",[t._v("Sanic will automatically spin up multiple processes and route traffic between them. We recommend as many workers as you have available processors.")]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("p",[t._v("The easiest way to get the maximum CPU performance is to use the "),e("code",[t._v("fast")]),t._v(" option. This will automatically run the maximum number of workers given the system constraints.")])]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fast"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("$ sanic server"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("app "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("host"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("port"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("fast\n")])])])])]),t._v(" "),e("p",[t._v("In older versions of Sanic without the "),e("code",[t._v("fast")]),t._v(" option, a common way to check this on Linux based operating systems:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ nproc\n")])])]),e("p",[t._v("Or, let Python do it:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" multiprocessing\nworkers "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" multiprocessing"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpu_count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workers"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("workers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"running-via-command"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#running-via-command"}},[t._v("#")]),t._v(" Running via command")]),t._v(" "),e("h4",{attrs:{id:"sanic-cli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sanic-cli"}},[t._v("#")]),t._v(" Sanic CLI")]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("p",[t._v("Sanic also has a simple CLI to launch via command line.")]),t._v(" "),e("p",[t._v("For example, if you initialized Sanic as app in a file named "),e("code",[t._v("server.py")]),t._v(", you could run the server like so:")])]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("sanic server.app "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--host")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0 "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--port")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--workers")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])])])]),t._v(" "),e("p",[t._v("Use "),e("code",[t._v("sanic --help")]),t._v(" to see all the options.")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ sanic --help\nusage: sanic [-h] [--version] [--factory] [-s] [-H HOST] [-p PORT] [-u UNIX] [--cert CERT] [--key KEY] [--tls DIR] [--tls-strict-host]\n             [-w WORKERS | --fast] [--access-logs | --no-access-logs] [--debug] [-d] [-r] [-R PATH] [--motd | --no-motd] [-v]\n             [--noisy-exceptions | --no-noisy-exceptions]\n             module\n\n   ▄███ █████ ██      ▄█▄      ██       █   █   ▄██████████\n  ██                 █   █     █ ██     █   █  ██\n   ▀███████ ███▄    ▀     █    █   ██   ▄   █  ██\n               ██  █████████   █     ██ █   █  ▄▄\n  ████ ████████▀  █         █  █       ██   █   ▀██ ███████\n\n To start running a Sanic application, provide a path to the module, where\n app is a Sanic() instance:\n\n     $ sanic path.to.server:app\n\n Or, a path to a callable that returns a Sanic() instance:\n\n     $ sanic path.to.factory:create_app --factory\n\n Or, a path to a directory to run as a simple HTTP server:\n\n     $ sanic ./path/to/static --simple\n\nRequired\n========\n  Positional:\n    module                         Path to your Sanic app. Example: path.to.server:app\n                                   If running a Simple Server, path to directory to serve. Example: ./\n\nOptional\n========\n  General:\n    -h, --help                     show this help message and exit\n    --version                      show program's version number and exit\n\n  Application:\n    --factory                      Treat app as an application factory, i.e. a () -> &lt;Sanic app> callable\n    -s, --simple                   Run Sanic as a Simple Server, and serve the contents of a directory\n                                   (module arg should be a path)\n\n  Socket binding:\n    -H HOST, --host HOST           Host address [default 127.0.0.1]\n    -p PORT, --port PORT           Port to serve on [default 8000]\n    -u UNIX, --unix UNIX           location of unix socket\n\n  TLS certificate:\n    --cert CERT                    Location of fullchain.pem, bundle.crt or equivalent\n    --key KEY                      Location of privkey.pem or equivalent .key file\n    --tls DIR                      TLS certificate folder with fullchain.pem and privkey.pem\n                                   May be specified multiple times to choose multiple certificates\n    --tls-strict-host              Only allow clients that send an SNI matching server certs\n\n  Worker:\n    -w WORKERS, --workers WORKERS  Number of worker processes [default 1]\n    --fast                         Set the number of workers to max allowed\n    --access-logs                  Display access logs\n    --no-access-logs               No display access logs\n\n  Development:\n    --debug                        Run the server in debug mode\n    -d, --dev                      Currently is an alias for --debug. But starting in v22.3, \n                                   --debug will no longer automatically trigger auto_restart. \n                                   However, --dev will continue, effectively making it the \n                                   same as debug + auto_reload.\n    -r, --reload, --auto-reload    Watch source directory for file changes and reload on changes\n    -R PATH, --reload-dir PATH     Extra directories to watch and reload on changes\n\n  Output:\n    --motd                         Show the startup display\n    --no-motd                      No show the startup display\n    -v, --verbosity                Control logging noise, eg. -vv or --verbosity=2 [default 0]\n    --noisy-exceptions             Output stack traces for all exceptions\n    --no-noisy-exceptions          No output stack traces for all exceptions\n")])])]),e("h4",{attrs:{id:"as-a-module"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#as-a-module"}},[t._v("#")]),t._v(" As a module")]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("p",[t._v("It can also be called directly as a module.")])]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("python "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" sanic server.app "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--host")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0 "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--port")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--workers")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("FYI")]),t._v(" "),e("p",[t._v("With either method (CLI or module), you shoud "),e("em",[t._v("not")]),t._v(" invoke "),e("code",[t._v("app.run()")]),t._v(" in your Python file. If you do, make sure you wrap it so that it only executes when directly run by the interpreter.")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__main__'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workers"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),e("h3",{attrs:{id:"sanic-simple-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sanic-simple-server"}},[t._v("#")]),t._v(" Sanic Simple Server")]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("p",[t._v("Sometimes you just have a directory of static files that need to be served. This especially can be handy for quickly standing up a localhost server. Sanic ships with a Simple Server, where you only need to point it at a directory.")])]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("sanic ./path/to/dir "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--simple")]),t._v("\n")])])])])]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("p",[t._v("This could also be paired with auto-reloading.")])]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("sanic ./path/to/dir "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--simple")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--reload")]),t._v(" --reload-dir"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("./path/to/dir\n")])])])])]),t._v(" "),e("div",{staticClass:"custom-block new"},[e("p",{staticClass:"custom-block-title"},[t._v("NEW in v22.6")]),t._v(" "),e("h3",{attrs:{id:"http-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-3"}},[t._v("#")]),t._v(" HTTP/3")]),t._v(" "),e("p",[t._v("Sanic server offers HTTP/3 support using "),e("a",{attrs:{href:"https://github.com/aiortc/aioquic",target:"_blank",rel:"noopener noreferrer"}},[t._v("aioquic"),e("OutboundLink")],1),t._v(". This "),e("strong",[t._v("must")]),t._v(" be installed to use HTTP/3:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pip install sanic aioquic\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pip install sanic[http3]\n")])])]),e("p",[t._v("To start HTTP/3, you must explicitly request it when running your application.")]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ sanic path.to.server:app --http=3\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ sanic path.to.server:app -3\n")])])])]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("version"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),e("p",[t._v("To run both an HTTP/3 and HTTP/1.1 server simultaneously, you can use "),e("a",{attrs:{href:"http://localhost:8080/en/guide/release-notes/v22.3.html#application-multi-serve",target:"_blank",rel:"noopener noreferrer"}},[t._v("application multi-serve"),e("OutboundLink")],1),t._v(" introduced in v22.3. This will automatically add an "),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Alt-Svc",target:"_blank",rel:"noopener noreferrer"}},[t._v("Alt-Svc"),e("OutboundLink")],1),t._v(" header to your HTTP/1.1 requests to let the client know that it is also available as HTTP/3.")]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ sanic path.to.server:app --http=3 --http=1\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ sanic path.to.server:app -3 -1\n")])])])]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepre"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("version"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prepre"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("version"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nSanic"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),e("p",[t._v("Because HTTP/3 requires TLS, you cannot start a HTTP/3 server without a TLS certificate. You should "),e("a",{attrs:{href:"http://localhost:8080/en/guide/how-to/tls.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("set it up yourself"),e("OutboundLink")],1),t._v(" or use "),e("code",[t._v("mkcert")]),t._v(" if in "),e("code",[t._v("DEBUG")]),t._v(" mode. Currently, automatic TLS setup for HTTP/3 is not compatible with "),e("code",[t._v("trustme")]),t._v(". See "),e("RouterLink",{attrs:{to:"/en/guide/deployment/development.html"}},[t._v("development")]),t._v(" for more details.")],1)]),t._v(" "),e("h2",{attrs:{id:"asgi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#asgi"}},[t._v("#")]),t._v(" ASGI")]),t._v(" "),e("p",[t._v("Sanic is also ASGI-compliant. This means you can use your preferred ASGI webserver to run Sanic. The three main implementations of ASGI are "),e("a",{attrs:{href:"http://github.com/django/daphne",target:"_blank",rel:"noopener noreferrer"}},[t._v("Daphne"),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://www.uvicorn.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Uvicorn"),e("OutboundLink")],1),t._v(", and "),e("a",{attrs:{href:"https://pgjones.gitlab.io/hypercorn/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hypercorn"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("Daphne does not support the ASGI "),e("code",[t._v("lifespan")]),t._v(" protocol, and therefore cannot be used to run Sanic. See "),e("a",{attrs:{href:"https://github.com/django/daphne/issues/264",target:"_blank",rel:"noopener noreferrer"}},[t._v("Issue #264"),e("OutboundLink")],1),t._v(" for more details.")])]),t._v(" "),e("p",[t._v("Follow their documentation for the proper way to run them, but it should look something like:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("uvicorn myapp:app\nhypercorn myapp:app\n")])])]),e("p",[t._v("A couple things to note when using ASGI:")]),t._v(" "),e("ol",[e("li",[t._v("When using the Sanic webserver, websockets will run using the "),e("code",[t._v("websockets")]),t._v(" package. In ASGI mode, there is no need for this package since websockets are managed in the ASGI server.")]),t._v(" "),e("li",[t._v("The ASGI lifespan protocol "),e("a",{attrs:{href:"https://asgi.readthedocs.io/en/latest/specs/lifespan.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://asgi.readthedocs.io/en/latest/specs/lifespan.html"),e("OutboundLink")],1),t._v(", supports only two server events: startup and shutdown. Sanic has four: before startup, after startup, before shutdown, and after shutdown. Therefore, in ASGI mode, the startup and shutdown events will run consecutively and not actually around the server process beginning and ending (since that is now controlled by the ASGI server). Therefore, it is best to use "),e("code",[t._v("after_server_start")]),t._v(" and "),e("code",[t._v("before_server_stop")]),t._v(".")])]),t._v(" "),e("h3",{attrs:{id:"trio"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#trio"}},[t._v("#")]),t._v(" Trio")]),t._v(" "),e("p",[t._v("Sanic has experimental support for running on Trio with:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("hypercorn -k trio myapp:app\n")])])]),e("h2",{attrs:{id:"gunicorn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gunicorn"}},[t._v("#")]),t._v(" Gunicorn")]),t._v(" "),e("p",[e("a",{attrs:{href:"http://gunicorn.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gunicorn"),e("OutboundLink")],1),t._v(' ("Green Unicorn") is a WSGI HTTP Server for UNIX based operating systems. It is a pre-fork worker model ported from Ruby’s Unicorn project.')]),t._v(" "),e("p",[t._v("In order to run Sanic application with Gunicorn, you need to use the special "),e("code",[t._v("sanic.worker.GunicornWorker")]),t._v(" for Gunicorn worker-class argument:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("gunicorn myapp:app "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--bind")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:1337 --worker-class sanic.worker.GunicornWorker\n")])])]),e("p",[t._v("If your application suffers from memory leaks, you can configure Gunicorn to gracefully restart a worker after it has processed a given number of requests. This can be a convenient way to help limit the effects of the memory leak.")]),t._v(" "),e("p",[t._v("See the "),e("a",{attrs:{href:"http://docs.gunicorn.org/en/latest/settings.html#max-requests",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gunicorn Docs"),e("OutboundLink")],1),t._v(" for more information.")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("When running Sanic via "),e("code",[t._v("gunicorn")]),t._v(", you are losing out on a lot of the performance benefits of "),e("code",[t._v("async")]),t._v("/"),e("code",[t._v("await")]),t._v(". Weigh your considerations carefully before making this choice. Gunicorn does provide a lot of configuration options, but it is not the best choice for getting Sanic to run at its fastest.")])]),t._v(" "),e("h2",{attrs:{id:"performance-considerations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#performance-considerations"}},[t._v("#")]),t._v(" Performance considerations")]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("p",[t._v("When running in production, make sure you turn off "),e("code",[t._v("debug")]),t._v(".")])]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" debug"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),e("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("p",[t._v("Sanic will also perform fastest if you turn off "),e("code",[t._v("access_log")]),t._v(".")]),t._v(" "),e("p",[t._v("If you still require access logs, but want to enjoy this performance boost, consider using "),e("RouterLink",{attrs:{to:"/en/guide/deployment/nginx.html"}},[t._v("Nginx as a proxy")]),t._v(", and letting that handle your access logging. It will be much faster than anything Python can handle.")],1)]),t._v(" "),e("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" access_log"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);